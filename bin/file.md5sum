#!/usr/bin/env python3

program = 'file.md5sum'
version = '0.1'
INFO = \
'''Insert file information into a SQL data base.
id          md5(file+name) 
filehash    md5(file)
name        string
delete      y/n
'''

import argparse
import fileinput
import logging
import os

import hashlib
import pathlib
import sqlite3 as sql

from inspect import getsourcefile

def lineMD5sum(lines, cumulative=False):
    '''Shows MD5sum of each line.
    Result is cumulative if flag is set.
    '''
    state = hashlib.md5()
    for line in lines:
        state.update(line.encode('utf-8'))
        linehash = state.hexdigest()
        yield f'{linehash} {line}'
        if not cumulative:
            state = hashlib.md5()


def fileMD5sum(filename):
    md5_hash = hashlib.md5()
    with open(filename, 'rb') as ff:
        for byte_block in iter(lambda: ff.read(4096), b""):
            md5_hash.update(byte_block)
    file_hash = md5_hash.digest()
    md5_hash.update(filename.encode('utf-8'))
    id_hash = md5_hash.digest()
    return {'id_hash':id_hash, 'file_hash':file_hash}

def parseInput():
    parser = argparse.ArgumentParser(
        description=INFO,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        )
    parser.add_argument(
        '-v', '--verbose',
        type=int,
        dest='verbose',
        nargs='?',
        default=logging.INFO//10,  # Default verbosity
        help='Provide verbose output (1=DEBUG, 2=INFO, 3=WARN, 4=ERROR, 5=CRITICAL)',
        )
    parser.add_argument('-V', '--version', action='version', version=f'{program} {version}')
    parser.add_argument(
        'args',
        nargs=argparse.REMAINDER,
        help='Files to process',
        )
    parser.add_argument('-c', '--cumulative', action='store_true', default=False,
        dest='cumulative',
        help='Cumulatively compute MD5 of each line')
    return parser.parse_args()

def setLogging(verbose):
    if verbose is None:
        level = logging.INFO  # Default verbosity level if flag is used without level
    else:
        level = verbose * 10  # Use verbosity number specified
    logging.basicConfig(level=level, format='%(levelname)-8s %(message)s')
    logging.debug('Using verbosity level {level:d}'.format(**locals()))

def mkdir_p(dirpath):
    '''mkdir -p
    Make directory if it doesn't exist. Ignore if it does.
    '''
    if not os.path.isdir(dirpath):
        os.makedirs(dirpath)

if __name__ == '__main__':
    args = parseInput()
    setLogging(verbose=args.verbose)
    # Make a list of all the filenames on the command line and as stdin
    if len(args.args) == 0:
        names = (name for name in fileinput.input())
    else:
        names = args.args
    for name in names:
        realfile = pathlib.Path(os.path.realpath(name))
        realname = realfile.name
        realpath = realfile.parent
    # Important to get actual name and not symlink
    realfile = pathlib.Path(os.path.realpath(__file__))
    realname = realfile.name
    bin_dir = realfile.parent
    db_dir = bin_dir / '..' / 'var/db'
    mkdir_p(db_dir)


